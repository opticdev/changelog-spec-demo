{"version":3,"sources":["domain/facts.js","domain/aggregate.js","domain/questions.js","FactView.js","Markdown.js","Copy.js","Question.js","Demo.js","domain/changelog_questions.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["AddField","parentId","fieldId","name","type","MakeFieldOptional","shapeId","defaultFacts","AddShape","ChangeFieldType","buildState","otherFacts","offset","length","shapes","fields","facts","slice","map","fact","properties","Shape","parent","Field","required","parentShape","Object","values","find","i","keys","includes","MakeFieldRequired","field","id","Questions","state","whatAreTheRequiredFieldsOfAnObject","shape","filter","sort","whatAreTheOptionalFieldsOfAnObject","whatFieldsDoesAnObjectHave","whatTypeIsExpectedForAField","isAFieldRequired","requiredFields","doesThisShapeMatch","data","diffs","getExpectedType","entries","value","validRequired","assertion1","hasOwnProperty","assertion2","push","optionalFields","validOptional","extrasFields","forEach","matches","every","Boolean","useStyles","makeStyles","theme","root","width","backgroundColor","palette","background","paper","CodeTick","children","style","color","fontWeight","padding","FactList","mainOffset","n1Offset","classes","className","List","index","ListItem","disabled","divider","display","flexDirection","displayFact","ListItemSecondaryAction","marginRight","opacity","MarkdownRender","source","noHeadings","renderers","heading","level","Typography","variant","marginBottom","paragraph","marginTop","whiteSpace","list","paddingLeft","listItem","paddingRight","factsWhy","trim","factsWhy2","questionsWhy","specSpecCopy","Question","props","title","inputs","code","alignContent","paddingTop","fontSize","borderRight","flex","preview","JSON","stringify","result","Demo","useState","setMainOffset","setN1Offset","mainState","n1OffsetState","changelogQuestions","state1","questions1","questions2","areTheseSpecsEqual","deepEqual","whatHasChanged","changes","reqSet1","Set","reqSet2","x","has","fieldTypes1","fieldTypes2","key","ChangelogQuestions","Grid","container","height","xs","md","item","overflow","gutterBottom","Slider","onChangeCommitted","e","valueLabelDisplay","step","marks","min","max","Divider","founded_year","mascot_name","city","website","json","createMuiTheme","primary","main","secondary","green","App","questions","console","log","CssBaseline","ThemeProvider","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.9207dc86.chunk.js","sourcesContent":["\nexport function AddShape(shapeId, type) {\n  return {AddShape: {shapeId, type}}\n}\n\nexport function AddField(parentId, fieldId, name, type) {\n  return {AddField: {parentId, fieldId, name, type}}\n}\n\nexport function MakeFieldRequired(fieldId) {\n  return {MakeFieldRequired: {fieldId}}\n}\n\nexport function MakeFieldOptional(fieldId) {\n  return {MakeFieldOptional: {fieldId}}\n}\n\nexport function RemoveField(fieldId) {\n  return {RemoveField: {fieldId}}\n}\n\nexport function ChangeFieldType(fieldId, type) {\n  return {ChangeFieldType: {fieldId, type}}\n}\n","import {AddField, AddShape, ChangeFieldType, MakeFieldOptional} from './facts';\n\nexport const defaultFacts = [\n  AddShape('root', 'object'),\n  AddField('root', 'field1', 'name', 'string'),\n  AddField('root', 'field2','founded_year', 'string'),\n  AddField('root', 'field3', 'mascot_name', 'string'),\n  AddField('root', 'field4', 'city', 'string'),\n  AddField('root', 'field5', 'website', 'string'),\n  MakeFieldOptional('field2'),\n  MakeFieldOptional('field5'),\n  ChangeFieldType('field2', 'number')\n]\n\nexport function buildState(otherFacts = [], offset= defaultFacts.length) {\n  const shapes = {}\n  const fields = {}\n\n  const facts = [...defaultFacts, ...otherFacts].slice(0, offset)\n\n  facts.map(fact => {\n    if (fact.AddShape) {\n      const properties = fact.AddShape\n      shapes[properties.shapeId] = Shape(properties.shapeId, [])\n    } else if (fact.AddField) {\n      const properties = fact.AddField\n      const parent = shapes[properties.parentId]\n      if (parent) {\n        fields[properties.fieldId] = Field(properties.fieldId, properties.name, properties.type)\n        parent.fields[properties.fieldId] = {required: true}\n      }\n    } else if (fact.MakeFieldOptional) {\n      const properties = fact.MakeFieldOptional\n      const parentShape = Object.values(shapes).find(i => Object.keys(i.fields).includes(properties.fieldId))\n      if (parentShape) {\n        parentShape.fields[properties.fieldId] = {required: false}\n      }\n    } else if (fact.MakeFieldRequired) {\n      const properties = fact.MakeFieldRequired\n      const parentShape = Object.values(shapes).find(i => Object.keys(i.fields).includes(properties.fieldId))\n      if (parentShape) {\n        parentShape.fields[properties.fieldId] = {required: true}\n      }\n    } else if (fact.ChangeFieldType) {\n      const properties = fact.ChangeFieldType\n      const field = fields[properties.fieldId]\n      if (field) {\n        field.type = properties.type\n      }\n    }\n  })\n\n  return {fields, shapes}\n}\n\nfunction Shape(id, fields = {}) {\n  return {id, fields}\n}\nfunction Field(id, name, type) {\n  return {id, name, type}\n}\n","export const Questions = (state) => {\n  function whatFieldsDoesAnObjectHave(shapeId) {\n    const shape = state.shapes[shapeId];\n    if (shape) {\n      return Object.keys(shape.fields)\n        .map((i) => state.fields[i].name)\n        .sort();\n    } else {\n      return undefined;\n    }\n  }\n\n  function whatAreTheRequiredFieldsOfAnObject(shapeId) {\n    const shape = state.shapes[shapeId];\n    if (shape) {\n      return Object.keys(shape.fields)\n        .filter((i) => shape.fields[i].required)\n        .map((i) => state.fields[i].name)\n        .sort();\n    } else {\n      return undefined;\n    }\n  }\n\n  function whatAreTheOptionalFieldsOfAnObject(shapeId) {\n    const shape = state.shapes[shapeId];\n    if (shape) {\n      return Object.keys(shape.fields)\n        .filter((i) => !shape.fields[i].required)\n        .map((i) => state.fields[i].name)\n        .sort();\n    } else {\n      return undefined;\n    }\n  }\n\n  function isAFieldRequired(fieldId) {\n    if (!state.fields[fieldId]) {\n      return false;\n    }\n\n    const requiredFields = whatAreTheRequiredFieldsOfAnObject('root');\n    const name = state.fields[fieldId].name;\n\n    return requiredFields.includes(name);\n  }\n\n  function whatTypeIsExpectedForAField(fieldId) {\n    return state.fields[fieldId] && state.fields[fieldId].type;\n  }\n\n  function doesThisShapeMatch(shapeId, data) {\n    const diffs = [];\n\n    function getExpectedType(name) {\n      const [id, value] = Object.entries(state.fields).find(\n        (i) => i[1].name === name\n      );\n      if (value) {\n        return value.type;\n      }\n    }\n\n    const requiredFields = whatAreTheRequiredFieldsOfAnObject(shapeId);\n\n    const validRequired = requiredFields.map((i) => {\n      const assertion1 = data.hasOwnProperty(i);\n      const assertion2 = typeof data[i] === getExpectedType(i);\n\n      if (!assertion1) {\n        diffs.push(`Required field ${i} is missing`);\n      }\n      if (assertion1 && !assertion2) {\n        diffs.push(\n          `Required field ${i} was a ${typeof data[\n            i\n          ]}, expected ${getExpectedType(i)}`\n        );\n      }\n\n      return assertion1 && assertion2;\n    });\n\n    const optionalFields = whatAreTheOptionalFieldsOfAnObject(shapeId);\n\n    const validOptional = optionalFields.map((i) => {\n      const assertion1 = data.hasOwnProperty(i);\n\n      if (!assertion1) {\n        return true;\n      }\n\n      const assertion2 = typeof data[i] === getExpectedType(i);\n\n      if (assertion1 && !assertion2) {\n        diffs.push(\n          `Optional field ${i} was a ${typeof data[\n            i\n          ]}, expected ${getExpectedType(i)}`\n        );\n      }\n\n      return assertion2;\n    });\n\n    const extrasFields = Object.keys(data).filter((i) => {\n      return !requiredFields.includes(i) && !optionalFields.includes(i);\n    });\n\n    extrasFields.forEach((i) => diffs.push(`Undocumented field ${i} observed`));\n\n    return {\n      matches:\n        extrasFields.length === 0 &&\n        validOptional.every((i) => Boolean(i)) &&\n        validRequired.every((i) => Boolean(i)),\n      diffs,\n    };\n  }\n\n  return {\n    whatFieldsDoesAnObjectHave,\n    whatAreTheRequiredFieldsOfAnObject,\n    whatAreTheOptionalFieldsOfAnObject,\n    whatTypeIsExpectedForAField,\n    isAFieldRequired,\n    doesThisShapeMatch,\n  };\n};\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\nimport InboxIcon from '@material-ui/icons/Inbox';\nimport DraftsIcon from '@material-ui/icons/Drafts';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nfunction CodeTick({ children, style }) {\n  return (\n    <span\n      style={{\n        backgroundColor: '#d4d4d4',\n        color: '#268aff',\n        fontWeight: 600,\n        padding: 4,\n        ...style,\n      }}\n    >\n      {children}\n    </span>\n  );\n}\n\nfunction displayFact(fact) {\n  if (fact.AddShape) {\n    const properties = fact.AddShape;\n    return (\n      <span>\n        Add Shape <CodeTick>{properties.shapeId}</CodeTick> as{' '}\n        <CodeTick>{properties.type}</CodeTick>\n      </span>\n    );\n  } else if (fact.AddField) {\n    const properties = fact.AddField;\n    return (\n      <span>\n        Add Field <CodeTick>{properties.name}</CodeTick> as{' '}\n        <CodeTick>{properties.type}</CodeTick> with id {properties.fieldId}\n      </span>\n    );\n  } else if (fact.MakeFieldOptional) {\n    const properties = fact.MakeFieldOptional;\n    return (\n      <span>\n        Make Field <CodeTick>{properties.fieldId}</CodeTick> optional\n      </span>\n    );\n  } else if (fact.MakeFieldRequired) {\n    const properties = fact.MakeFieldRequired;\n    return (\n      <span>\n        Make Field <CodeTick>{properties.fieldId}</CodeTick> required\n      </span>\n    );\n  } else if (fact.ChangeFieldType) {\n    const properties = fact.ChangeFieldType;\n    return (\n      <span>\n        Change Field <CodeTick>{properties.fieldId}</CodeTick> to{' '}\n        <CodeTick>{properties.type}</CodeTick>\n      </span>\n    );\n  }\n}\n\nexport default function FactList({ facts, mainOffset, n1Offset }) {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <List>\n        {facts.map((fact, index) => (\n          <ListItem\n            style={{ padding: 5 }}\n            disabled={!(index < mainOffset)}\n            divider={true}\n          >\n            <div style={{ display: 'flex', flexDirection: 'column' }}>\n              {displayFact(fact)}\n              <ListItemSecondaryAction>\n                <CodeTick\n                  style={{\n                    marginRight: 10,\n                    opacity: index < mainOffset ? 1 : 0,\n                  }}\n                >\n                  N\n                </CodeTick>\n                <CodeTick style={{ opacity: index < n1Offset ? 1 : 0 }}>\n                  N+1\n                </CodeTick>\n              </ListItemSecondaryAction>\n            </div>\n          </ListItem>\n        ))}\n      </List>\n    </div>\n  );\n}\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport ReactMarkdown from 'react-markdown';\n\nexport function MarkdownRender({ source, style, noHeadings }) {\n  return (\n    <div style={style}>\n      <ReactMarkdown\n        source={source}\n        renderers={{\n          heading: ({ level, children }) =>\n            !noHeadings ? (\n              <Typography\n                color=\"primary\"\n                variant={`h${level}`}\n                style={{ fontWeight: 300, marginBottom: 3 }}\n              >\n                {children}\n              </Typography>\n            ) : null,\n          paragraph: ({ children }) => (\n            <Typography\n              variant=\"body2\"\n              style={{ fontWeight: 200, marginTop: 11, whiteSpace: 'pre-wrap' }}\n            >\n              {children}\n            </Typography>\n          ),\n          list: ({ children }) => {\n            return <ul style={{ paddingLeft: 20 }}>{children}</ul>;\n          },\n          listItem: ({ children }) => (\n            <li style={{ paddingLeft: 0 }}>\n              <Typography\n                variant=\"body2\"\n                style={{\n                  paddingLeft: 5,\n                  paddingRight: 5,\n                  marginTop: 11,\n                  fontWeight: 200,\n                }}\n              >\n                {children}\n              </Typography>\n            </li>\n          ),\n        }}\n      />\n    </div>\n  );\n}\n","export const factsWhy = `\nIn a Changelog Spec, a sequence of immutable Facts represent the domain being described. This has many advantages over a mutable data structure humans maintain:\n\n- Native support for temporal use cases. Easy to understand how the domain changes over time.\n- Simple data structure that's easy for tools to read and append to.\n- Pure model of the domain being described. Removing the requirement for a spec to be human readable/modifiable allows cleaner modeling that remains forwards/backwards compatible. Facts are immutable. You can add more, or change how they are reduced, but changelog specs don't have to worry about breaking changes in the spec affecting users or tooling.\n- Simplicity, and the lack of multiple concurrent versions of spec to support, make accurate reference implementations feasible to produce.\n`.trim();\n\nexport const factsWhy2 = `\nTooling can dispatch new Facts by appending directly to the Changelog Spec or through the reference implementation's \\`handleCommand\\` function, which maintains the integrity of the Changelog by preventing invalid events or duplicate IDs from being applied.\n\n`.trim();\n\nexport const questionsWhy = `\nChangelog Specs are the union of Facts + Questions. As you add more Facts, the answers to Questions you ask about the domain will also change.\n\n- Many important questions can be answered with nothing but the facts ie \"Which fields are required?\"\n- Some questions may compare the state of the spec to some external data ie \"Does this JSON match the shape with ID 'root'?\"\n- And another class of questions are about how the domain has changed over time, ie \"What's changed since offset X?\"\n\nSome core Questions will be part of the Changelog Spec reference implementation and will be treated as immutable (safe to depend on). Other more vendor-specific use cases can be built on-top of those stable Questions, or on the immutable Facts themselves.\n\n`.trim();\n\nexport const specSpecCopy = `\nAdjust both (N) and (N+1) sliders to compare the spec across different points in its history\n`.trim();\n","import { makeStyles } from '@material-ui/core/styles';\nimport { Divider, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { MarkdownRender } from './Markdown';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nexport function Question(props) {\n  const classes = useStyles();\n  const { title, code, inputs } = props;\n\n  return (\n    <div style={{ marginTop: 18 }}>\n      <Typography variant=\"subtitle1\">{title}</Typography>\n      {inputs.map((i, index) => {\n        return (\n          <div\n            style={{\n              display: 'flex',\n              flexDirection: 'row',\n              alignContent: 'center',\n            }}\n          >\n            <Typography\n              variant=\"subtitle2\"\n              style={{\n                marginTop: 5,\n                paddingTop: 7,\n                color: '#6e6e6e',\n                fontSize: 10,\n                paddingRight: 5,\n                borderRight: '1px solid #e2e2e2',\n              }}\n            >\n              Example {index + 1}\n            </Typography>\n            <div style={{ flex: 1, paddingLeft: 10 }}>\n              <MarkdownRender\n                style={{\n                  backgroundColor: '#e2e2e2',\n                }}\n                source={'```\\n' + i.preview + '\\n```'}\n              />\n              <Typography variant=\"caption\">Result:</Typography>\n              <MarkdownRender\n                style={{\n                  backgroundColor: '#e2e2e2',\n                }}\n                source={'```\\n' + JSON.stringify(i.result(), null, 2) + '\\n```'}\n              />\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { Divider, Typography } from '@material-ui/core';\nimport FactList from './FactView';\nimport { buildState, defaultFacts } from './domain/aggregate';\nimport Slider from '@material-ui/core/Slider';\nimport { MarkdownRender } from './Markdown';\nimport { factsWhy, factsWhy2, questionsWhy, specSpecCopy } from './Copy';\nimport { Questions } from './domain/questions';\nimport { Question } from './Question';\nimport { ChangelogQuestions } from './domain/changelog_questions';\n\nexport function Demo() {\n  const [mainOffset, setMainOffset] = useState(defaultFacts.length - 3);\n  const [n1Offset, setN1Offset] = useState(defaultFacts.length - 1);\n\n  const mainState = Questions(buildState([], mainOffset));\n  const n1OffsetState = buildState([], n1Offset);\n\n  const changelogQuestions = ChangelogQuestions(\n    buildState([], mainOffset),\n    n1OffsetState\n  );\n\n  return (\n    <Grid container style={{ height: '100vh' }}>\n      <Grid\n        xs={12}\n        md={5}\n        item\n        style={{\n          borderRight: '1px solid #e2e2e2',\n          padding: 15,\n          backgroundColor: 'white',\n          overflow: 'scroll',\n          height: '100vh',\n        }}\n      >\n        <Typography variant=\"h5\">Facts</Typography>\n\n        <MarkdownRender source={factsWhy} />\n\n        <Typography\n          variant=\"subtitle1\"\n          style={{ marginTop: 10, marginBottom: 5, fontSize: 15 }}\n        >\n          Here's a very basic example of a changelog spec for describing the\n          shape of JSON:\n        </Typography>\n\n        <FactList\n          facts={defaultFacts}\n          mainOffset={mainOffset}\n          n1Offset={n1Offset}\n        />\n\n        <Typography\n          variant=\"subtitle1\"\n          style={{ marginTop: 20, marginBottom: 15, fontSize: 15 }}\n        >\n          These sliders control the offset of facts included in two specs\n          (Version N) and (Version N+1):\n        </Typography>\n\n        <Typography id=\"discrete-slider\" gutterBottom variant=\"caption\">\n          Version N\n        </Typography>\n        <Slider\n          value={mainOffset}\n          onChangeCommitted={(e, value) => {\n            setMainOffset(value);\n            if (value > n1Offset) {\n              setN1Offset(value);\n            }\n          }}\n          valueLabelDisplay=\"auto\"\n          step={1}\n          marks\n          min={0}\n          max={defaultFacts.length}\n        />\n\n        <Typography id=\"discrete-slider\" gutterBottom variant=\"caption\">\n          Version N+1\n        </Typography>\n        <Slider\n          value={n1Offset}\n          onChangeCommitted={(e, value) => {\n            if (value < mainOffset) {\n              setN1Offset(mainOffset);\n            } else {\n              setN1Offset(value);\n            }\n          }}\n          valueLabelDisplay=\"auto\"\n          step={1}\n          marks\n          min={0}\n          max={defaultFacts.length}\n        />\n\n        <MarkdownRender source={factsWhy2} />\n      </Grid>\n      <Grid\n        xs={12}\n        md={7}\n        item\n        style={{\n          backgroundColor: '#f5f5f5',\n          padding: 15,\n          overflow: 'scroll',\n          height: '100vh',\n        }}\n      >\n        <Typography variant=\"h5\">Questions</Typography>\n        <MarkdownRender source={questionsWhy} />\n\n        <Typography variant=\"h6\" style={{ marginTop: 15 }}>\n          Core Questions\n        </Typography>\n        <Question\n          title=\"What fields does an object have?\"\n          inputs={[\n            {\n              preview: `spec.whatFieldsDoesAnObjectHave('root')`,\n              result: () => mainState.whatFieldsDoesAnObjectHave('root'),\n            },\n          ]}\n        />\n        <Question\n          title=\"What are the required fields of an object?\"\n          inputs={[\n            {\n              preview: `spec.whatAreTheRequiredFieldsOfAnObject('root')`,\n              result: () =>\n                mainState.whatAreTheRequiredFieldsOfAnObject('root'),\n            },\n          ]}\n        />\n        <Question\n          title=\"What are the optional fields of an object?\"\n          inputs={[\n            {\n              preview: `spec.whatAreTheOptionalFieldsOfAnObject('root')`,\n              result: () =>\n                mainState.whatAreTheOptionalFieldsOfAnObject('root'),\n            },\n          ]}\n        />\n        <Question\n          title=\"Is a field required?\"\n          inputs={[\n            {\n              preview: `spec.isAFieldRequired('field2')`,\n              result: () => mainState.isAFieldRequired('field2'),\n            },\n          ]}\n        />\n        <Question\n          title=\"What type is expected for field?\"\n          inputs={[\n            {\n              preview: `spec.whatTypeIsExpectedForAField('root')`,\n              result: () => mainState.whatTypeIsExpectedForAField('field2'),\n            },\n          ]}\n        />\n\n        <Divider style={{ marginTop: 20, marginBottom: 20 }} />\n\n        <Typography variant=\"h6\" style={{ marginTop: 15 }}>\n          Validation Questions{' '}\n          <i style={{ fontWeight: 100 }}>Changelog Spec + Outside Data</i>\n        </Typography>\n        <Question\n          title=\"Does this input JSON match the expected shape?\"\n          inputs={(() => {\n            const json1 = {\n              name: 'Philadelphia Phillies',\n              founded_year: '1883',\n              mascot_name: 'Phillie Phanatic',\n              city: 'Philadelphia',\n              website: 'https://www.mlb.com/phillies',\n            };\n\n            const json2 = {\n              founded_year: '1883',\n              website: 'https://www.mlb.com/phillies',\n            };\n\n            const json3 = {\n              name: 'Philadelphia Phillies',\n              founded_year: 1883,\n              mascot_name: 'Phillie Phanatic',\n              city: 'Philadelphia',\n            };\n\n            return [json1, json2, json3].map((json) => ({\n              preview: `spec.doesThisShapeMatch('root', ${JSON.stringify(\n                json,\n                null,\n                2\n              )})`,\n              result: () => mainState.doesThisShapeMatch('root', json),\n            }));\n          })()}\n        />\n\n        <Typography variant=\"h6\" style={{ marginTop: 15 }}>\n          Change Management Questions{' '}\n          <i style={{ fontWeight: 100 }}>Changelog Spec + Outside Data</i>\n        </Typography>\n        <MarkdownRender source={specSpecCopy} />\n        <Question\n          title=\"Are the specs equal?\"\n          inputs={[\n            {\n              preview: `changelog.areTheseSpecsEqual(n, n1)`,\n              result: () => changelogQuestions.areTheseSpecsEqual(),\n            },\n          ]}\n        />\n        <Question\n          title=\"What changed?\"\n          inputs={[\n            {\n              preview: `changelog.whatHasChanged(n, n1)`,\n              result: () => changelogQuestions.whatHasChanged(),\n            },\n          ]}\n        />\n      </Grid>\n    </Grid>\n  );\n}\n","import { Questions } from './questions';\nimport deepEqual from 'deep-equal';\n\nexport const ChangelogQuestions = (state, state1) => {\n  const questions1 = Questions(state);\n  const questions2 = Questions(state1);\n\n  function areTheseSpecsEqual() {\n    //naive, should use projections\n    return deepEqual(state, state1);\n  }\n\n  function whatHasChanged() {\n    const changes = [];\n\n    const reqSet1 = new Set([\n      ...questions1.whatAreTheRequiredFieldsOfAnObject('root'),\n    ]);\n    const reqSet2 = new Set([\n      ...questions2.whatAreTheRequiredFieldsOfAnObject('root'),\n    ]);\n\n    const newRequired = new Set([...reqSet2].filter((x) => !reqSet1.has(x)));\n    newRequired.forEach((i) => changes.push(`Field ${i} was added`));\n\n    const optSet1 = new Set([\n      ...questions1.whatAreTheOptionalFieldsOfAnObject('root'),\n    ]);\n    const optSet2 = new Set([\n      ...questions2.whatAreTheOptionalFieldsOfAnObject('root'),\n    ]);\n\n    const nowOptional = new Set([...reqSet1].filter((x) => !reqSet2.has(x)));\n    nowOptional.forEach((i) => changes.push(`Field ${i} is now optional`));\n\n    const fieldTypes1 = {};\n    const fieldTypes2 = {};\n    Object.entries(state.fields).map(\n      ([key, value]) => (fieldTypes1[key] = value.type)\n    );\n    Object.entries(state1.fields).map(\n      ([key, value]) => (fieldTypes2[key] = value.type)\n    );\n\n    Object.entries(fieldTypes2).map(([key, value]) => {\n      if (fieldTypes1[key] !== value) {\n        changes.push(\n          `Field ${state1.fields[key].name} was changed from ${fieldTypes1[key]} to a ${value}`\n        );\n      }\n    });\n\n    //naive, should use projections\n    return changes;\n  }\n\n  return {\n    areTheseSpecsEqual,\n    whatHasChanged,\n  };\n};\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { buildState } from './domain/aggregate';\nimport { Questions } from './domain/questions';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport purple from '@material-ui/core/colors/purple';\nimport green from '@material-ui/core/colors/green';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { Demo } from './Demo';\n\nexport const primary = '#31366f';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: primary,\n    },\n    secondary: {\n      main: green[500],\n    },\n  },\n});\n\nfunction App() {\n  const questions = Questions(buildState());\n\n  console.log(questions.whatFieldsDoesAnObjectHave('root'));\n\n  return (\n    <>\n      <CssBaseline />\n      <ThemeProvider theme={theme}>\n        <Demo />\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}